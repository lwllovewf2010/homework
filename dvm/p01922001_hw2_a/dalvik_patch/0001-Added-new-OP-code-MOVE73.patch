From b9302688b1484e8b651441e99b1a812c3ec1be00 Mon Sep 17 00:00:00 2001
From: "Hung, Merck" <merckhung@gmail.com>
Date: Sun, 16 Mar 2014 00:43:18 +0800
Subject: [PATCH] Added new OP code MOVE73

Signed-off-by: Hung, Merck <merckhung@gmail.com>
---
 dx/src/com/android/dx/dex/code/Dops.java     |  5 +++++
 dx/src/com/android/dx/dex/code/RopToDop.java |  1 +
 dx/src/com/android/dx/io/OpcodeInfo.java     |  5 +++++
 dx/src/com/android/dx/io/Opcodes.java        |  1 +
 libdex/DexOpcodes.cpp                        |  2 +-
 libdex/DexOpcodes.h                          |  4 ++--
 libdex/InstrUtils.cpp                        |  8 ++++----
 opcode-gen/bytecode.txt                      |  2 +-
 vm/analysis/CodeVerify.cpp                   |  2 +-
 vm/analysis/DexVerify.cpp                    |  2 +-
 vm/analysis/Liveness.cpp                     |  2 +-
 vm/mterp/armv5te/OP_MOVE73.S                 | 11 +++++++++++
 vm/mterp/armv6t2/OP_MOVE73.S                 | 10 ++++++++++
 vm/mterp/c/OP_MOVE73.cpp                     |  9 +++++++++
 vm/mterp/mips/OP_MOVE73.S                    | 10 ++++++++++
 vm/mterp/out/InterpAsm-armv5te-vfp.S         | 19 +++++++++++++------
 vm/mterp/out/InterpAsm-armv5te.S             | 19 +++++++++++++------
 vm/mterp/out/InterpAsm-armv7-a-neon.S        | 19 +++++++++++++------
 vm/mterp/out/InterpAsm-armv7-a.S             | 19 +++++++++++++------
 vm/mterp/out/InterpAsm-mips.S                | 17 +++++++++++------
 vm/mterp/out/InterpAsm-x86.S                 | 23 +++++++++++++++--------
 vm/mterp/out/InterpC-allstubs.cpp            | 11 +++++++++--
 vm/mterp/out/InterpC-portable.cpp            | 11 +++++++++--
 vm/mterp/x86/OP_MOVE73.S                     | 11 +++++++++++
 24 files changed, 170 insertions(+), 53 deletions(-)
 create mode 100644 vm/mterp/armv5te/OP_MOVE73.S
 create mode 100644 vm/mterp/armv6t2/OP_MOVE73.S
 create mode 100644 vm/mterp/c/OP_MOVE73.cpp
 create mode 100644 vm/mterp/mips/OP_MOVE73.S
 create mode 100644 vm/mterp/x86/OP_MOVE73.S

diff --git a/dx/src/com/android/dx/dex/code/Dops.java b/dx/src/com/android/dx/dex/code/Dops.java
index cc5c173..3525e26 100644
--- a/dx/src/com/android/dx/dex/code/Dops.java
+++ b/dx/src/com/android/dx/dex/code/Dops.java
@@ -499,6 +499,10 @@ public final class Dops {
         new Dop(Opcodes.INVOKE_INTERFACE, Opcodes.INVOKE_INTERFACE,
             Opcodes.INVOKE_INTERFACE_RANGE, Form35c.THE_ONE, false);
 
+    public static final Dop MOVE73 =
+        new Dop(Opcodes.MOVE73, Opcodes.MOVE73,
+            Opcodes.NO_NEXT, Form12x.THE_ONE, true);
+
     public static final Dop INVOKE_VIRTUAL_RANGE =
         new Dop(Opcodes.INVOKE_VIRTUAL_RANGE, Opcodes.INVOKE_VIRTUAL,
             Opcodes.NO_NEXT, Form3rc.THE_ONE, false);
@@ -1053,6 +1057,7 @@ public final class Dops {
         set(INVOKE_DIRECT);
         set(INVOKE_STATIC);
         set(INVOKE_INTERFACE);
+        set(MOVE73);
         set(INVOKE_VIRTUAL_RANGE);
         set(INVOKE_SUPER_RANGE);
         set(INVOKE_DIRECT_RANGE);
diff --git a/dx/src/com/android/dx/dex/code/RopToDop.java b/dx/src/com/android/dx/dex/code/RopToDop.java
index fbfb0db..1b24d80 100644
--- a/dx/src/com/android/dx/dex/code/RopToDop.java
+++ b/dx/src/com/android/dx/dex/code/RopToDop.java
@@ -149,6 +149,7 @@ public final class RopToDop {
     //     Opcodes.INVOKE_DIRECT
     //     Opcodes.INVOKE_STATIC
     //     Opcodes.INVOKE_INTERFACE
+    //     Opcodes.MOVE73
     //     Opcodes.NEG_INT
     //     Opcodes.NOT_INT
     //     Opcodes.NEG_LONG
diff --git a/dx/src/com/android/dx/io/OpcodeInfo.java b/dx/src/com/android/dx/io/OpcodeInfo.java
index 2040d35..2341ffb 100644
--- a/dx/src/com/android/dx/io/OpcodeInfo.java
+++ b/dx/src/com/android/dx/io/OpcodeInfo.java
@@ -495,6 +495,10 @@ public final class OpcodeInfo {
         new Info(Opcodes.INVOKE_INTERFACE, "invoke-interface",
             InstructionCodec.FORMAT_35C, IndexType.METHOD_REF);
 
+    public static final Info MOVE73 =
+        new Info(Opcodes.MOVE73, "move73",
+            InstructionCodec.FORMAT_12X, IndexType.NONE);
+
     public static final Info INVOKE_VIRTUAL_RANGE =
         new Info(Opcodes.INVOKE_VIRTUAL_RANGE, "invoke-virtual/range",
             InstructionCodec.FORMAT_3RC, IndexType.METHOD_REF);
@@ -1055,6 +1059,7 @@ public final class OpcodeInfo {
         set(INVOKE_DIRECT);
         set(INVOKE_STATIC);
         set(INVOKE_INTERFACE);
+        set(MOVE73);
         set(INVOKE_VIRTUAL_RANGE);
         set(INVOKE_SUPER_RANGE);
         set(INVOKE_DIRECT_RANGE);
diff --git a/dx/src/com/android/dx/io/Opcodes.java b/dx/src/com/android/dx/io/Opcodes.java
index 6dba49d..58e4d19 100644
--- a/dx/src/com/android/dx/io/Opcodes.java
+++ b/dx/src/com/android/dx/io/Opcodes.java
@@ -150,6 +150,7 @@ public final class Opcodes {
     public static final int INVOKE_DIRECT = 0x70;
     public static final int INVOKE_STATIC = 0x71;
     public static final int INVOKE_INTERFACE = 0x72;
+    public static final int MOVE73 = 0x73;
     public static final int INVOKE_VIRTUAL_RANGE = 0x74;
     public static final int INVOKE_SUPER_RANGE = 0x75;
     public static final int INVOKE_DIRECT_RANGE = 0x76;
diff --git a/libdex/DexOpcodes.cpp b/libdex/DexOpcodes.cpp
index bdcc558..4fb5f90 100644
--- a/libdex/DexOpcodes.cpp
+++ b/libdex/DexOpcodes.cpp
@@ -145,7 +145,7 @@ static const char* gOpNames[kNumPackedOpcodes] = {
     "invoke-direct",
     "invoke-static",
     "invoke-interface",
-    "unused-73",
+    "move73",
     "invoke-virtual/range",
     "invoke-super/range",
     "invoke-direct/range",
diff --git a/libdex/DexOpcodes.h b/libdex/DexOpcodes.h
index 8a17841..f5e8f89 100644
--- a/libdex/DexOpcodes.h
+++ b/libdex/DexOpcodes.h
@@ -183,7 +183,7 @@ enum Opcode {
     OP_INVOKE_DIRECT                = 0x70,
     OP_INVOKE_STATIC                = 0x71,
     OP_INVOKE_INTERFACE             = 0x72,
-    OP_UNUSED_73                    = 0x73,
+    OP_MOVE73                       = 0x73,
     OP_INVOKE_VIRTUAL_RANGE         = 0x74,
     OP_INVOKE_SUPER_RANGE           = 0x75,
     OP_INVOKE_DIRECT_RANGE          = 0x76,
@@ -449,7 +449,7 @@ enum Opcode {
         H(OP_INVOKE_DIRECT),                                                  \
         H(OP_INVOKE_STATIC),                                                  \
         H(OP_INVOKE_INTERFACE),                                               \
-        H(OP_UNUSED_73),                                                      \
+        H(OP_MOVE73),                                                         \
         H(OP_INVOKE_VIRTUAL_RANGE),                                           \
         H(OP_INVOKE_SUPER_RANGE),                                             \
         H(OP_INVOKE_DIRECT_RANGE),                                            \
diff --git a/libdex/InstrUtils.cpp b/libdex/InstrUtils.cpp
index be343f0..8915fa1 100644
--- a/libdex/InstrUtils.cpp
+++ b/libdex/InstrUtils.cpp
@@ -39,7 +39,7 @@ static InstructionWidth gInstructionWidthTable[kNumPackedOpcodes] = {
     0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
-    3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1,
+    3, 3, 3, 1, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
@@ -172,7 +172,7 @@ static u1 gOpcodeFlagsTable[kNumPackedOpcodes] = {
     kInstrCanContinue|kInstrCanThrow|kInstrInvoke,
     kInstrCanContinue|kInstrCanThrow|kInstrInvoke,
     kInstrCanContinue|kInstrCanThrow|kInstrInvoke,
-    0,
+    kInstrCanContinue,
     kInstrCanContinue|kInstrCanThrow|kInstrInvoke,
     kInstrCanContinue|kInstrCanThrow|kInstrInvoke,
     kInstrCanContinue|kInstrCanThrow|kInstrInvoke,
@@ -338,7 +338,7 @@ static u1 gInstructionFormatTable[kNumPackedOpcodes] = {
     kFmt22c,  kFmt22c,  kFmt22c,  kFmt22c,  kFmt22c,  kFmt21c,  kFmt21c,
     kFmt21c,  kFmt21c,  kFmt21c,  kFmt21c,  kFmt21c,  kFmt21c,  kFmt21c,
     kFmt21c,  kFmt21c,  kFmt21c,  kFmt21c,  kFmt21c,  kFmt35c,  kFmt35c,
-    kFmt35c,  kFmt35c,  kFmt35c,  kFmt00x,  kFmt3rc,  kFmt3rc,  kFmt3rc,
+    kFmt35c,  kFmt35c,  kFmt35c,  kFmt12x,  kFmt3rc,  kFmt3rc,  kFmt3rc,
     kFmt3rc,  kFmt3rc,  kFmt00x,  kFmt00x,  kFmt12x,  kFmt12x,  kFmt12x,
     kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,
     kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,  kFmt12x,
@@ -406,7 +406,7 @@ static u1 gInstructionIndexTypeTable[kNumPackedOpcodes] = {
     kIndexFieldRef,     kIndexFieldRef,     kIndexFieldRef,
     kIndexFieldRef,     kIndexFieldRef,     kIndexMethodRef,
     kIndexMethodRef,    kIndexMethodRef,    kIndexMethodRef,
-    kIndexMethodRef,    kIndexUnknown,      kIndexMethodRef,
+    kIndexMethodRef,    kIndexNone,         kIndexMethodRef,
     kIndexMethodRef,    kIndexMethodRef,    kIndexMethodRef,
     kIndexMethodRef,    kIndexUnknown,      kIndexUnknown,
     kIndexNone,         kIndexNone,         kIndexNone,
diff --git a/opcode-gen/bytecode.txt b/opcode-gen/bytecode.txt
index 6b7b9b1..63f8963 100644
--- a/opcode-gen/bytecode.txt
+++ b/opcode-gen/bytecode.txt
@@ -193,7 +193,7 @@ op   6f invoke-super                35c  n method-ref    continue|throw|invoke
 op   70 invoke-direct               35c  n method-ref    continue|throw|invoke
 op   71 invoke-static               35c  n method-ref    continue|throw|invoke
 op   72 invoke-interface            35c  n method-ref    continue|throw|invoke
-# unused: op 73
+op   73 move73                      12x  y none          continue
 op   74 invoke-virtual/range        3rc  n method-ref    continue|throw|invoke
 op   75 invoke-super/range          3rc  n method-ref    continue|throw|invoke
 op   76 invoke-direct/range         3rc  n method-ref    continue|throw|invoke
diff --git a/vm/analysis/CodeVerify.cpp b/vm/analysis/CodeVerify.cpp
index 56a9fbd..1f2d161 100644
--- a/vm/analysis/CodeVerify.cpp
+++ b/vm/analysis/CodeVerify.cpp
@@ -3877,6 +3877,7 @@ static bool verifyInstruction(const Method* meth, InsnFlags* insnFlags,
         break;
 
     case OP_MOVE:
+		case OP_MOVE73:
     case OP_MOVE_FROM16:
     case OP_MOVE_16:
         copyRegister1(workLine, decInsn.vA, decInsn.vB, kTypeCategory1nr,
@@ -5806,7 +5807,6 @@ sput_1nr_common:
     case OP_UNUSED_41:
     case OP_UNUSED_42:
     case OP_UNUSED_43:
-    case OP_UNUSED_73:
     case OP_UNUSED_79:
     case OP_UNUSED_7A:
     case OP_BREAKPOINT:
diff --git a/vm/analysis/DexVerify.cpp b/vm/analysis/DexVerify.cpp
index c47c301..42741c5 100644
--- a/vm/analysis/DexVerify.cpp
+++ b/vm/analysis/DexVerify.cpp
@@ -852,6 +852,7 @@ static bool verifyInstructions(VerifierData* vdata)
             okay &= checkBranchTarget(meth, insnFlags, codeOffset, true);
             break;
         case OP_MOVE:
+				case OP_MOVE73:
         case OP_MOVE_FROM16:
         case OP_MOVE_16:
         case OP_MOVE_OBJECT:
@@ -1175,7 +1176,6 @@ static bool verifyInstructions(VerifierData* vdata)
         case OP_UNUSED_41:
         case OP_UNUSED_42:
         case OP_UNUSED_43:
-        case OP_UNUSED_73:
         case OP_UNUSED_79:
         case OP_UNUSED_7A:
         case OP_UNUSED_FF:
diff --git a/vm/analysis/Liveness.cpp b/vm/analysis/Liveness.cpp
index 361d3cb..699c660 100644
--- a/vm/analysis/Liveness.cpp
+++ b/vm/analysis/Liveness.cpp
@@ -475,6 +475,7 @@ static bool processInstruction(VerifierData* vdata, u4 insnIdx,
         break;
 
     case OP_MOVE:
+		case OP_MOVE73:
     case OP_MOVE_FROM16:
     case OP_MOVE_16:
     case OP_MOVE_OBJECT:
@@ -721,7 +722,6 @@ static bool processInstruction(VerifierData* vdata, u4 insnIdx,
     case OP_UNUSED_41:
     case OP_UNUSED_42:
     case OP_UNUSED_43:
-    case OP_UNUSED_73:
     case OP_UNUSED_79:
     case OP_UNUSED_7A:
     case OP_BREAKPOINT:
diff --git a/vm/mterp/armv5te/OP_MOVE73.S b/vm/mterp/armv5te/OP_MOVE73.S
new file mode 100644
index 0000000..efeddf4
--- /dev/null
+++ b/vm/mterp/armv5te/OP_MOVE73.S
@@ -0,0 +1,11 @@
+%verify "executed"
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    mov     r1, rINST, lsr #12          @ r1<- B from 15:12
+    mov     r0, rINST, lsr #8           @ r0<- A from 11:8
+    FETCH_ADVANCE_INST(1)               @ advance rPC, load rINST
+    GET_VREG(r2, r1)                    @ r2<- fp[B]
+    and     r0, r0, #15
+    GET_INST_OPCODE(ip)                 @ ip<- opcode from rINST
+    SET_VREG(r2, r0)                    @ fp[A]<- r2
+    GOTO_OPCODE(ip)                     @ execute next instruction
diff --git a/vm/mterp/armv6t2/OP_MOVE73.S b/vm/mterp/armv6t2/OP_MOVE73.S
new file mode 100644
index 0000000..3047158
--- /dev/null
+++ b/vm/mterp/armv6t2/OP_MOVE73.S
@@ -0,0 +1,10 @@
+%verify "executed"
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    mov     r1, rINST, lsr #12          @ r1<- B from 15:12
+    ubfx    r0, rINST, #8, #4           @ r0<- A from 11:8
+    FETCH_ADVANCE_INST(1)               @ advance rPC, load rINST
+    GET_VREG(r2, r1)                    @ r2<- fp[B]
+    GET_INST_OPCODE(ip)                 @ ip<- opcode from rINST
+    SET_VREG(r2, r0)                    @ fp[A]<- r2
+    GOTO_OPCODE(ip)                     @ execute next instruction
diff --git a/vm/mterp/c/OP_MOVE73.cpp b/vm/mterp/c/OP_MOVE73.cpp
new file mode 100644
index 0000000..6666199
--- /dev/null
+++ b/vm/mterp/c/OP_MOVE73.cpp
@@ -0,0 +1,9 @@
+HANDLE_OPCODE($opcode /*vA, vB*/)
+    vdst = INST_A(inst);
+    vsrc1 = INST_B(inst);
+    ILOGV("|move%s v%d,v%d %s(v%d=0x%08x)",
+        (INST_INST(inst) == OP_MOVE) ? "" : "-object", vdst, vsrc1,
+        kSpacing, vdst, GET_REGISTER(vsrc1));
+    SET_REGISTER(vdst, GET_REGISTER(vsrc1));
+    FINISH(1);
+OP_END
diff --git a/vm/mterp/mips/OP_MOVE73.S b/vm/mterp/mips/OP_MOVE73.S
new file mode 100644
index 0000000..dbf7ea4
--- /dev/null
+++ b/vm/mterp/mips/OP_MOVE73.S
@@ -0,0 +1,10 @@
+%verify "executed"
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    GET_OPB(a1)                            #  a1 <- B from 15:12
+    GET_OPA4(a0)                           #  a0 <- A from 11:8
+    FETCH_ADVANCE_INST(1)                  #  advance rPC, load rINST
+    GET_VREG(a2, a1)                       #  a2 <- fp[B]
+    GET_INST_OPCODE(t0)                    #  t0 <- opcode from rINST
+    SET_VREG_GOTO(a2, a0, t0)              #  fp[A] <- a2
+
diff --git a/vm/mterp/out/InterpAsm-armv5te-vfp.S b/vm/mterp/out/InterpAsm-armv5te-vfp.S
index a173c72..edfeb32 100644
--- a/vm/mterp/out/InterpAsm-armv5te-vfp.S
+++ b/vm/mterp/out/InterpAsm-armv5te-vfp.S
@@ -3202,11 +3202,18 @@ dalvik_inst:
 
 /* ------------------------------ */
     .balign 64
-.L_OP_UNUSED_73: /* 0x73 */
-/* File: armv5te/OP_UNUSED_73.S */
-/* File: armv5te/unused.S */
-    bl      common_abort
-
+.L_OP_MOVE73: /* 0x73 */
+/* File: armv5te/OP_MOVE73.S */
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    mov     r1, rINST, lsr #12          @ r1<- B from 15:12
+    mov     r0, rINST, lsr #8           @ r0<- A from 11:8
+    FETCH_ADVANCE_INST(1)               @ advance rPC, load rINST
+    GET_VREG(r2, r1)                    @ r2<- fp[B]
+    and     r0, r0, #15
+    GET_INST_OPCODE(ip)                 @ ip<- opcode from rINST
+    SET_VREG(r2, r0)                    @ fp[A]<- r2
+    GOTO_OPCODE(ip)                     @ execute next instruction
 
 /* ------------------------------ */
     .balign 64
@@ -12396,7 +12403,7 @@ dvmAsmAltInstructionStart = .L_ALT_OP_NOP
 
 /* ------------------------------ */
     .balign 64
-.L_ALT_OP_UNUSED_73: /* 0x73 */
+.L_ALT_OP_MOVE73: /* 0x73 */
 /* File: armv5te/alt_stub.S */
 /*
  * Inter-instruction transfer stub.  Call out to dvmCheckBefore to handle
diff --git a/vm/mterp/out/InterpAsm-armv5te.S b/vm/mterp/out/InterpAsm-armv5te.S
index 7b6c9d1..eda2a2a 100644
--- a/vm/mterp/out/InterpAsm-armv5te.S
+++ b/vm/mterp/out/InterpAsm-armv5te.S
@@ -3224,11 +3224,18 @@ dalvik_inst:
 
 /* ------------------------------ */
     .balign 64
-.L_OP_UNUSED_73: /* 0x73 */
-/* File: armv5te/OP_UNUSED_73.S */
-/* File: armv5te/unused.S */
-    bl      common_abort
-
+.L_OP_MOVE73: /* 0x73 */
+/* File: armv5te/OP_MOVE73.S */
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    mov     r1, rINST, lsr #12          @ r1<- B from 15:12
+    mov     r0, rINST, lsr #8           @ r0<- A from 11:8
+    FETCH_ADVANCE_INST(1)               @ advance rPC, load rINST
+    GET_VREG(r2, r1)                    @ r2<- fp[B]
+    and     r0, r0, #15
+    GET_INST_OPCODE(ip)                 @ ip<- opcode from rINST
+    SET_VREG(r2, r0)                    @ fp[A]<- r2
+    GOTO_OPCODE(ip)                     @ execute next instruction
 
 /* ------------------------------ */
     .balign 64
@@ -12854,7 +12861,7 @@ dvmAsmAltInstructionStart = .L_ALT_OP_NOP
 
 /* ------------------------------ */
     .balign 64
-.L_ALT_OP_UNUSED_73: /* 0x73 */
+.L_ALT_OP_MOVE73: /* 0x73 */
 /* File: armv5te/alt_stub.S */
 /*
  * Inter-instruction transfer stub.  Call out to dvmCheckBefore to handle
diff --git a/vm/mterp/out/InterpAsm-armv7-a-neon.S b/vm/mterp/out/InterpAsm-armv7-a-neon.S
index c3419c2..7c275ff 100644
--- a/vm/mterp/out/InterpAsm-armv7-a-neon.S
+++ b/vm/mterp/out/InterpAsm-armv7-a-neon.S
@@ -3206,11 +3206,18 @@ dalvik_inst:
 
 /* ------------------------------ */
     .balign 64
-.L_OP_UNUSED_73: /* 0x73 */
-/* File: armv5te/OP_UNUSED_73.S */
-/* File: armv5te/unused.S */
-    bl      common_abort
-
+.L_OP_MOVE73: /* 0x73 */
+/* File: armv5te/OP_MOVE73.S */
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    mov     r1, rINST, lsr #12          @ r1<- B from 15:12
+    mov     r0, rINST, lsr #8           @ r0<- A from 11:8
+    FETCH_ADVANCE_INST(1)               @ advance rPC, load rINST
+    GET_VREG(r2, r1)                    @ r2<- fp[B]
+    and     r0, r0, #15
+    GET_INST_OPCODE(ip)                 @ ip<- opcode from rINST
+    SET_VREG(r2, r0)                    @ fp[A]<- r2
+    GOTO_OPCODE(ip)                     @ execute next instruction
 
 /* ------------------------------ */
     .balign 64
@@ -12333,7 +12340,7 @@ dvmAsmAltInstructionStart = .L_ALT_OP_NOP
 
 /* ------------------------------ */
     .balign 64
-.L_ALT_OP_UNUSED_73: /* 0x73 */
+.L_ALT_OP_MOVE73: /* 0x73 */
 /* File: armv5te/alt_stub.S */
 /*
  * Inter-instruction transfer stub.  Call out to dvmCheckBefore to handle
diff --git a/vm/mterp/out/InterpAsm-armv7-a.S b/vm/mterp/out/InterpAsm-armv7-a.S
index 2542245..ac634c0 100644
--- a/vm/mterp/out/InterpAsm-armv7-a.S
+++ b/vm/mterp/out/InterpAsm-armv7-a.S
@@ -3206,11 +3206,18 @@ dalvik_inst:
 
 /* ------------------------------ */
     .balign 64
-.L_OP_UNUSED_73: /* 0x73 */
-/* File: armv5te/OP_UNUSED_73.S */
-/* File: armv5te/unused.S */
-    bl      common_abort
-
+.L_OP_MOVE73: /* 0x73 */
+/* File: armv5te/OP_MOVE73.S */
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    mov     r1, rINST, lsr #12          @ r1<- B from 15:12
+    mov     r0, rINST, lsr #8           @ r0<- A from 11:8
+    FETCH_ADVANCE_INST(1)               @ advance rPC, load rINST
+    GET_VREG(r2, r1)                    @ r2<- fp[B]
+    and     r0, r0, #15
+    GET_INST_OPCODE(ip)                 @ ip<- opcode from rINST
+    SET_VREG(r2, r0)                    @ fp[A]<- r2
+    GOTO_OPCODE(ip)                     @ execute next instruction
 
 /* ------------------------------ */
     .balign 64
@@ -12333,7 +12340,7 @@ dvmAsmAltInstructionStart = .L_ALT_OP_NOP
 
 /* ------------------------------ */
     .balign 64
-.L_ALT_OP_UNUSED_73: /* 0x73 */
+.L_ALT_OP_MOVE73: /* 0x73 */
 /* File: armv5te/alt_stub.S */
 /*
  * Inter-instruction transfer stub.  Call out to dvmCheckBefore to handle
diff --git a/vm/mterp/out/InterpAsm-mips.S b/vm/mterp/out/InterpAsm-mips.S
index 3e1c670..6e2d590 100644
--- a/vm/mterp/out/InterpAsm-mips.S
+++ b/vm/mterp/out/InterpAsm-mips.S
@@ -3879,11 +3879,16 @@ dalvik_inst:
 
 /* ------------------------------ */
     .balign 128
-.L_OP_UNUSED_73: /* 0x73 */
-/* File: mips/OP_UNUSED_73.S */
-/* File: mips/unused.S */
-    BAL(common_abort)
-
+.L_OP_MOVE73: /* 0x73 */
+/* File: mips/OP_MOVE73.S */
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    GET_OPB(a1)                            #  a1 <- B from 15:12
+    GET_OPA4(a0)                           #  a0 <- A from 11:8
+    FETCH_ADVANCE_INST(1)                  #  advance rPC, load rINST
+    GET_VREG(a2, a1)                       #  a2 <- fp[B]
+    GET_INST_OPCODE(t0)                    #  t0 <- opcode from rINST
+    SET_VREG_GOTO(a2, a0, t0)              #  fp[A] <- a2
 
 
 /* ------------------------------ */
@@ -15057,7 +15062,7 @@ dvmAsmAltInstructionStart = .L_ALT_OP_NOP
 
 /* ------------------------------ */
     .balign 128
-.L_ALT_OP_UNUSED_73: /* 0x73 */
+.L_ALT_OP_MOVE73: /* 0x73 */
 /* File: mips/alt_stub.S */
 /*
  * Inter-instruction transfer stub.  Call out to dvmCheckBefore to handle
diff --git a/vm/mterp/out/InterpAsm-x86.S b/vm/mterp/out/InterpAsm-x86.S
index c87f306..1dfa434 100644
--- a/vm/mterp/out/InterpAsm-x86.S
+++ b/vm/mterp/out/InterpAsm-x86.S
@@ -4412,11 +4412,18 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     jmp        common_invokeMethodNoRange
 
 /* ------------------------------ */
-.L_OP_UNUSED_73: /* 0x73 */
-/* File: x86/OP_UNUSED_73.S */
-/* File: x86/unused.S */
-    jmp     common_abort
-
+.L_OP_MOVE73: /* 0x73 */
+/* File: x86/OP_MOVE73.S */
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    movzbl rINSTbl,%eax          # eax<- BA
+    andb   $0xf,%al             # eax<- A
+    shrl   $4,rINST            # rINST<- B
+    GET_VREG_R rINST rINST
+    FETCH_INST_OPCODE 1 %ecx
+    ADVANCE_PC 1
+    SET_VREG rINST %eax           # fp[A]<-fp[B]
+    GOTO_NEXT_R %ecx
 
 /* ------------------------------ */
 .L_OP_INVOKE_VIRTUAL_RANGE: /* 0x74 */
@@ -11372,7 +11379,7 @@ dvmAsmAltInstructionStartCode = .L_ALT_OP_NOP
     jmp    *dvmAsmInstructionStart+(114*4)
 
 /* ------------------------------ */
-.L_ALT_OP_UNUSED_73: /* 0x73 */
+.L_ALT_OP_MOVE73: /* 0x73 */
 /* File: x86/alt_stub.S */
 /*
  * Inter-instruction transfer stub.  Call out to dvmCheckBefore to handle
@@ -15159,7 +15166,7 @@ dvmAsmInstructionStart:
     .long .L_OP_INVOKE_DIRECT /* 0x70 */
     .long .L_OP_INVOKE_STATIC /* 0x71 */
     .long .L_OP_INVOKE_INTERFACE /* 0x72 */
-    .long .L_OP_UNUSED_73 /* 0x73 */
+    .long .L_OP_MOVE73 /* 0x73 */
     .long .L_OP_INVOKE_VIRTUAL_RANGE /* 0x74 */
     .long .L_OP_INVOKE_SUPER_RANGE /* 0x75 */
     .long .L_OP_INVOKE_DIRECT_RANGE /* 0x76 */
@@ -15419,7 +15426,7 @@ dvmAsmAltInstructionStart:
     .long .L_ALT_OP_INVOKE_DIRECT /* 0x70 */
     .long .L_ALT_OP_INVOKE_STATIC /* 0x71 */
     .long .L_ALT_OP_INVOKE_INTERFACE /* 0x72 */
-    .long .L_ALT_OP_UNUSED_73 /* 0x73 */
+    .long .L_ALT_OP_MOVE73 /* 0x73 */
     .long .L_ALT_OP_INVOKE_VIRTUAL_RANGE /* 0x74 */
     .long .L_ALT_OP_INVOKE_SUPER_RANGE /* 0x75 */
     .long .L_ALT_OP_INVOKE_DIRECT_RANGE /* 0x76 */
diff --git a/vm/mterp/out/InterpC-allstubs.cpp b/vm/mterp/out/InterpC-allstubs.cpp
index 1ef8783..f4b775c 100644
--- a/vm/mterp/out/InterpC-allstubs.cpp
+++ b/vm/mterp/out/InterpC-allstubs.cpp
@@ -2227,8 +2227,15 @@ HANDLE_OPCODE(OP_INVOKE_INTERFACE /*vB, {vD, vE, vF, vG, vA}, meth@CCCC*/)
     GOTO_invoke(invokeInterface, false);
 OP_END
 
-/* File: c/OP_UNUSED_73.cpp */
-HANDLE_OPCODE(OP_UNUSED_73)
+/* File: c/OP_MOVE73.cpp */
+HANDLE_OPCODE(OP_MOVE73 /*vA, vB*/)
+    vdst = INST_A(inst);
+    vsrc1 = INST_B(inst);
+    ILOGV("|move%s v%d,v%d %s(v%d=0x%08x)",
+        (INST_INST(inst) == OP_MOVE) ? "" : "-object", vdst, vsrc1,
+        kSpacing, vdst, GET_REGISTER(vsrc1));
+    SET_REGISTER(vdst, GET_REGISTER(vsrc1));
+    FINISH(1);
 OP_END
 
 /* File: c/OP_INVOKE_VIRTUAL_RANGE.cpp */
diff --git a/vm/mterp/out/InterpC-portable.cpp b/vm/mterp/out/InterpC-portable.cpp
index 0328aa8..2fa87d7 100644
--- a/vm/mterp/out/InterpC-portable.cpp
+++ b/vm/mterp/out/InterpC-portable.cpp
@@ -2238,8 +2238,15 @@ HANDLE_OPCODE(OP_INVOKE_INTERFACE /*vB, {vD, vE, vF, vG, vA}, meth@CCCC*/)
     GOTO_invoke(invokeInterface, false);
 OP_END
 
-/* File: c/OP_UNUSED_73.cpp */
-HANDLE_OPCODE(OP_UNUSED_73)
+/* File: c/OP_MOVE73.cpp */
+HANDLE_OPCODE(OP_MOVE73 /*vA, vB*/)
+    vdst = INST_A(inst);
+    vsrc1 = INST_B(inst);
+    ILOGV("|move%s v%d,v%d %s(v%d=0x%08x)",
+        (INST_INST(inst) == OP_MOVE) ? "" : "-object", vdst, vsrc1,
+        kSpacing, vdst, GET_REGISTER(vsrc1));
+    SET_REGISTER(vdst, GET_REGISTER(vsrc1));
+    FINISH(1);
 OP_END
 
 /* File: c/OP_INVOKE_VIRTUAL_RANGE.cpp */
diff --git a/vm/mterp/x86/OP_MOVE73.S b/vm/mterp/x86/OP_MOVE73.S
new file mode 100644
index 0000000..ec05288
--- /dev/null
+++ b/vm/mterp/x86/OP_MOVE73.S
@@ -0,0 +1,11 @@
+%verify "executed"
+    /* for move, move-object, long-to-int */
+    /* op vA, vB */
+    movzbl rINSTbl,%eax          # eax<- BA
+    andb   $$0xf,%al             # eax<- A
+    shrl   $$4,rINST            # rINST<- B
+    GET_VREG_R rINST rINST
+    FETCH_INST_OPCODE 1 %ecx
+    ADVANCE_PC 1
+    SET_VREG rINST %eax           # fp[A]<-fp[B]
+    GOTO_NEXT_R %ecx
-- 
1.8.3.2

